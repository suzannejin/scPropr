/*
 * -------------------------------------------------
 *  nf-proportionality Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  /*
   * Input data
   * it show follow a path structure like this:  /path/to/mouseStemCells/mouseStemCells_experimental_full_absolute.csv.gz
   */
  datadir                                        = "/users/cn/sjin/projects/proportionality/run_scPropr"
  input_count_file                               = "${datadir}/data/mouseStemCells/mouseStemCells_{experimental,phaseS}_full_absolute.csv.gz"
  input_features_file                            = "${datadir}/data/mouseStemCells/mouseStemCells_{experimental,phaseS}_full_features.csv"   // features (genes) name 
  input_barcodes_file                            = "${datadir}/data/mouseStemCells/mouseStemCells_{experimental,phaseS}_full_barcodes.csv"   // barcodes or cell id

  /* also perform analysis on non-zero genes only (non zero for main experimental data) */
  do_nozero_genes                                = true

  /* simulations */
  simulation_slope                               = [2,4,6,8]
  simulation_ndata                               = [5]
  simulation_cell_factor                         = [1]
  do_simulation                                  = true
  do_simulation_type                             = ['phaseS'] // 'phaseS+rel'  // the type of data that will be used as scDesign modeling step input

  /* compute plots */
  random_seed                                    = 0
  do_plot_data_exploration                       = true
  do_plot_original_vs_transf                     = true
  do_plot_log_vs_transf                          = true
  do_plot_abs_vs_rel_transf                      = true
  do_plot_log2abs_vs_rel_transf                  = true
  do_plot_abs_vs_rel_cor                         = true
  do_plot_log2abs_vs_rel_cor_colored             = true
  do_plot_log2abs_vs_rel_cor_colored_indiv       = true
  do_plot_log2abs_vs_rel_cor_colored_indiv_gm    = false
  do_evaluate_log2abs_vs_rel_cor                 = false
  do_evaluate_log2abs_vs_rel_cor_filter          = false

  /* data processing */
  method_replace_zero                            = "zcompositions" // "zcompositions,pseudocount,one,min,none" 
  method_transform_data                          = "log2,tmm,scran,clr,alr,tmm2" //,clr2,alr2" // ,tmmcpm,alr2"     // log2,clr,alr,tmm,scran
  refgenes                                       = ['EIF4A1','RPL8','MT-RNR2','TOP2A','UBE2C','HIST1H1B']  //'LACTB2',
  refgenes_nozero                                = ['EIF4A1','RPL8','MT-RNR2']

  /* correlation */
  method_correlation                             = "rho,cor,vlr,pcor,pcor.shrink"  
  do_fdr                                         = false   // TODO add a step to calculate FDR
  method_evaluation                              = "rho"  // pearson,rho,spearman
  scatter_colorby                                = ['dropout']
  scatter_filter                                 = [0.2]

  /* output folder */
  // outdir                                         = "${datadir}/results-${method_replace_zero}"
  outdir                                         = "${baseDir}/results"
  tracedir                                       = "${params.outdir}/pipeline_info"
  publish_dir_mode                               = 'copy'

  /* only test */
  do_test                                        = false   // TODO define test

  // Defaults only, expecting to be overwritten
  max_memory                                     = 84.GB
  max_cpus                                       = 16
  max_time                                       = 240.h
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled              = true
    singularity.enabled         = false
    podman.enabled              = false
    shifter.enabled             = false
    charliecloud.enabled        = false
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled         = true
    singularity.autoMounts      = true
    docker.enabled              = false
    podman.enabled              = false
    shifter.enabled             = false
    charliecloud.enabled        = false
  }
  test  { includeConfig 'conf/test.config' }
  crg   { includeConfig 'conf/crg.config' }
  trace { includeConfig 'conf/trace.config' }
}

tower {
  // accessToken = '57cc4e09eb0909d18d9926731205dfff09a13cc4'   // old github tower
  accessToken = 'eyJ0aWQiOiA0MjUzfS4wNDA0ZGMxNWM2ZTk0YWQ0ODAyNjFlNjI0ZGNjZTAyZWNmMDU4MTQ3'
  enabled = false
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER   = "/.Rprofile"
  R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// about this pipeline
manifest {
  name            = 'suzannejin/scPropr'
  author          = 'Suzanne Jin'
  homePage        = 'https://github.com/suzannejin/scpropr'
  description     = 'Compositional analysis on single cell data'
  mainScript      = 'main.nf'
  nextflowVersion = '!>=20.11.0'
  version         = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
