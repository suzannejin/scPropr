/*
 * -------------------------------------------------
 *  nf-proportionality Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // input count data
  count_file = "${baseDir}/data/unprocessed_matrix/*/filtered/{absolute,relative}.csv.gz"

  // keep genes with no zero components only
  nozero_genes = "${baseDir}/data/unprocessed_matrix/*/filtered/features_pos_nozero.csv"
  nozero_mode = true

  // transform or normalize data
  methods_replace_zero = "zcompositions,none"   // zcompositions,min,one,none
  methods_transf_data = "log2,clr,tmm"     // log2,clr,tmm

  // correlation
  methods_corr = "rho,pearson,partialcor,vlr"

  // output
  if (params.nozero_mode){
    outdir = "${baseDir}/results_nozero"
  }else{
    outdir = "${baseDir}/results_all"
  }
  tracedir = "${params.outdir}/pipeline_info"

  // other general options
  publish_dir_mode = 'copy'
  check_out = true

  // Defaults only, expecting to be overwritten
  max_memory = 84.GB
  max_cpus = 16
  max_time = 240.h

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    docker.enabled = false
    singularity.enabled = true
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    singularity.autoMounts = true
    includeConfig 'conf/container.config'
  }
  test { includeConfig 'conf/test.config' }
  crg { includeConfig 'conf/crg.config' }
  trace { includeConfig 'conf/trace.config' }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
